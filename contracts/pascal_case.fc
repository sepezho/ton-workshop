#include "imports/stdlib.fc";

() storage::save (int number) impure {
  cell data = begin_cell().store_uint(number, 64).end_cell();
  set_data(data);
}

(int) storage::load () {
  cell ds = get_data(); ;; entire store
  slice data = ds.begin_parse();
  return data~load_uint(64);
}

;; function that will be called by other contracts
;; cell = 1023bit + 4 ref
;; slice = cell.begin_parse() 
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
  if (in_msg_body~is_empty()){
    return;
  }

  int op = in_msg_body~load_uint(32);
  int query_id = in_msg_body~load_uint(64);
  
  int added_value = in_msg_body~load_uint(64);
  
  int old_number = storage::load();

  if (op == 1) { ;; +
    old_number += added_value; 
  } else { ;; -
    old_number -= added_value; 
  }

  storage::save(old_number);
  return;
}

;; getter 
(int) get_number () method_id {
  int number = storage::load();
  return number;
}

;; getter 
(int) get_test_number () method_id {
  return 1;
}
